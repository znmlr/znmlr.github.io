[
{
	"uri": "/zh/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
	"title": "精通正则表达式",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "/zh/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
	"title": "读书笔记",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "/zh/basics/",
	"title": "基础",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "/zh/",
	"title": "Hugo 主题的 Learn 文档",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zh/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E7%AC%AC1%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/",
	"title": "第1章 入门示例拓展",
	"tags": [],
	"description": "",
	"content": " 完整的正则表达式由两种字符构成：特殊字符又称元字符，其他文字。 egrep：正则表达式检索巩固 egrep \u0026#39;^(From|Subject):\u0026#39; mailbox-file 行的起始和结束 ^表示一行的开始 $表示一行的结束 cat\t/// 匹配一行文本中任意位置的cat ^cat\t/// 匹配行首的cat cat$\t/// 匹配行尾的cat 养成按照字符来理解正则表达式的习惯 ^cat /// 不要理解为cat开头的行 /// 匹配的是以c作为一行的第一个字符，紧接着一个a，紧接着一个t的文本 ^和$他们匹配的不是具体文本，而是一个位置 匹配若干字符之一 gr[ea]y /// 匹配grey、gray，表示或的关系 \u0026lt;H[1-6]\u0026gt; 等价于 \u0026lt;H[123456]\u0026gt; /// 用于匹配\u0026lt;H1\u0026gt;、\u0026lt;H2\u0026gt;、\u0026lt;H3\u0026gt;、\u0026lt;H4\u0026gt;、\u0026lt;H5\u0026gt;、\u0026lt;H6\u0026gt; 只有在字符组内部，连字符才是元字符，否则它就只能匹配普通的连字符号 如果连字符出现在字符组的开头，它也表示就只是一个普通字符，而不是范围 排除型字符组 [^1-6] /// 匹配除了1到6以外的任何字符 /// ^表示排除 用点号匹配任意字符 /// 欲匹配下列字符串 03/19/76\t03-19-76\t03.19.76 /// 方法一 03[-./]19[-./]76 /// 方法二 03.19.76 法一中，点号不是元字符，连字符也不是元字符 法二中，点号可以匹配任何字符 两者不等价，有些许差异 匹配任意子表达式 |，它的意思是“或”，把不同的子表达式组合成一个总的表达式，这个总表达式能够匹配任意的子表达式。 gr[ea]y\t等价于 grey|gray 等价于 gr(a|e)y 不等价与 gr[a|e]y 这里|只是普通字符，不是元字符 不等价与 gra|ey 这个其实是gra或ey 忽略大小写 [Ff][Rr][Oo][Mm]来替代From，这样就可以忽略大小写了，但是太麻烦了 利用工具特性，而不是正在表达式特性，-i egrep -i '(From|Subject|Data):' mailbox 单词分界符 \\\u0026lt;和\\\u0026gt;，分别是单词版本的^和$，匹配单词的开头和结束位置 \u0026lt;和\u0026gt;并不是元字符，只有当它们和斜线结合的时候，才具有特殊意义 可选项 需要匹配July或者Jul的时候，可以用(July|Jul)，但用July?更简洁 ?加在一个字符的后面，表示允许出现这个字符，但也可以不出现 需要匹配4th或者4的时候，可以简化为4(th)?，界定符?作用对象就是括号 重复出现 +：表示之前紧邻的元素出现一次或多次，即\u0026gt;0 *：表示之前紧邻的元素出现任意多数，即\u0026gt;=0 ?、+、*都是限定所作用元素的重现次数，统称为量词 部分版本支持区间量词：{min,max}，例如[a-zA-Z]{1,5}里匹配美国股票代码，1到5个字符 括号及反向引用 查询重复单词，例如thethe\n\\\u0026lt;thethe\\\u0026gt; \\\u0026lt;(A-Za-z)+\\1\\\u0026gt;，括号能够记忆其中子表达式匹配的文本，不论这些文本是什么，\\1都能记忆他们 一个表达式中可以使用多个扩展，再用\\1、\\2、\\3来表示第一、第二、第三个括号匹配的文本 ([a-z])([0-9])\\1\\2 转义 反斜线用于转义 欲匹配字符串：ega.att.com 如果使用ega.att.com，则不对，可能匹配到megawattcomputing 因为.本身就是元字符，可以匹配任何字符包括空格 正确的是 ega\\.att\\.com 转义符使它作用的元字符失去特殊含义变成普通字符 "
},
{
	"uri": "/zh/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E7%AC%AC2%E7%AB%A0-%E5%85%A5%E9%97%A8%E7%A4%BA%E4%BE%8B%E6%8B%93%E5%B1%95/",
	"title": "第2章 入门示例拓展",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zh/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zh/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]